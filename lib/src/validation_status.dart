import 'dart:collection';

import 'package:data_validator/data_validator.dart';
import 'package:data_validator/src/utils.dart';

/// {@template ValidationStatus}
/// This class stores the overall status of a validation process for a target
/// object. It aggregates the status of individual validation units.
/// {@endtemplate}
final class ValidationStatus {
  final _validationStatus = <UnitValidationStatus>[];

  /// A list of individual validation status related to the nodes of the
  /// validation pipeline.
  ///
  /// Each element is a [UnitValidationStatus] generated by a node.
  UnmodifiableListView<UnitValidationStatus> get detailedStatus =>
      UnmodifiableListView<UnitValidationStatus>(_validationStatus);

  /// This attribute is a summary of the general status of the current
  /// validatation pipeline status. It is initiated with the `validationName`
  /// as [UnitValidationStatus.nodeName] and with
  /// [UnitValidationStatusCode.notDefined] as [UnitValidationStatus.status].
  /// The initial description is the default one.
  final UnitValidationStatus status;

  /// {@macro ValidationStatus}
  ///
  /// ## Parameter
  /// ### Named Parameters
  /// - `required String validationName`: A descriptive name for the validation
  /// process. It will be used to describe the general state of the validation
  /// process represented by this [ValidationStatus].
  ValidationStatus({required String validationName})
      : status = UnitValidationStatus(
          nodeName: validationName,
          status: UnitValidationStatusCode.notDefined,
          description: UnitValidationStatusCode.notDefined.defaultDescription,
        );

  /// Adds a new validation result to the status.
  /// The result can be a single `UnitValidationStatus` or a list of them.
  // ignore: avoid_annotating_with_dynamic
  void addResult(UnitValidationStatus validationStatus) =>
      _validationStatus.add(validationStatus);

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is ValidationStatus) {
      return status == other.status &&
          listEquality(detailedStatus, other.detailedStatus) &&
          runtimeType == other.runtimeType;
    }
    return false;
  }

  @override
  int get hashCode => Object.hashAll([status, ..._validationStatus]);
}
